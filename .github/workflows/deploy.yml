name: Build, Test, and Deploy Docker Image

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker Image
        env:
          IMAGE_NAME: ${{ secrets.DOCKER_USERNAME }}/flask-app
        run: |
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME:latest

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r tests/requirements.txt

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: pytest tests/

  deploy:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Deploy to Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          script: |
            sudo apt-get update
            sudo apt-get install -y docker.io certbot

            # Остановка веб-сервера, если он активен
            sudo systemctl stop nginx || true
            
            # Обновление сертификата с помощью Certbot
            sudo certbot certonly --standalone -d mirea-api.ru --non-interactive --agree-tos -m tima.privalov@bk.ru
            
            # Запуск веб-сервера после обновления сертификата
            sudo systemctl start nginx || true

      - name: Prepare Server Directory
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          script: |
            mkdir -p /home/${{ secrets.HOSTING_NAME }}/app/

      - name: Copy Deployment Files
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          source: docker-compose.yml
          target: "/home/${{ secrets.HOSTING_NAME }}/app/"

      - name: Deploy New Docker Image
        uses: appleboy/ssh-action@v0.1.0
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          script: |
            cd /home/${{ secrets.HOSTING_NAME }}/app
            docker-compose down
            docker pull ${{ secrets.DOCKER_USERNAME }}/flask-app:latest
            docker-compose up --scale web=3 -d

      - name: Copy Kubernetes Manifests
        uses: appleboy/scp-action@v0.1.0
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          source: "*.yml"  # Замените на точные имена файлов, если нужно
          target: "/home/${{ secrets.HOSTING_NAME }}/app/"

      - name: Apply Kubernetes Manifests
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          script: |
            cd /home/${{ secrets.HOSTING_NAME }}/app/
            kubectl apply -f deployment.yml
            kubectl apply -f service.yml

      - name: Install or Upgrade Helm Release
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          script: |
            cd /home/${{ secrets.HOSTING_NAME }}/app/
            if helm list | grep -q "my-flask-app"; then
              helm upgrade my-flask-app ./flask-app
            else
              helm install my-flask-app ./flask-app
            fi

      - name: Set up HPA for flask-app
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTING_SERVER }}
          username: ${{ secrets.HOSTING_NAME }}
          password: ${{ secrets.HOSTING_PASSWORD }}
          script: |
            kubectl get hpa flask-app || kubectl autoscale deployment flask-app --min=3 --max=10 --cpu-percent=80
